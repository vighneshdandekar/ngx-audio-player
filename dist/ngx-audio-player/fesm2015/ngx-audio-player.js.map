{"version":3,"file":"ngx-audio-player.js","sources":["ng://ngx-audio-player/lib/component/base/base-audio-player.component.ts","ng://ngx-audio-player/lib/service/audio-player-service/audio-player.service.ts","ng://ngx-audio-player/lib/component/mat-advanced-audio-player/mat-advanced-audio-player.component.ts","ng://ngx-audio-player/lib/component/mat-basic-audio-player/mat-basic-audio-player.component.ts","ng://ngx-audio-player/lib/pipe/seconds-to-minutes.ts","ng://ngx-audio-player/lib/ngx-audio-player.module.ts","ng://ngx-audio-player/lib/model/track.model.ts","ng://ngx-audio-player/public_api.ts","ng://ngx-audio-player/ngx-audio-player.ts"],"sourcesContent":["import { ViewChild, ElementRef, Output, Input } from '@angular/core';\nimport { MatSlider } from '@angular/material/slider';\nimport { Track } from '../../model/track.model';\nimport { Subject } from 'rxjs';\n\nexport class BaseAudioPlayerFunctions {\n\n    @Output()\n    trackEnded: Subject<string> = new Subject<string>();\n\n    @ViewChild('audioPlayer', { static: true }) player: ElementRef;\n    timeLineDuration: MatSlider;\n\n    iOS = (/iPad|iPhone|iPod/.test(navigator.platform)\n        || (navigator.platform === 'MacIntel' && navigator.maxTouchPoints > 1))\n        && !window.MSStream;\n\n    loaderDisplay = false;\n    isPlaying = false;\n    currentTime = 0;\n    volume = 0.1;\n    duration = 0.01;\n\n    private startOffsetValue = 0;\n    @Input()\n    set startOffset(seconds: number) {\n        this.startOffsetValue = seconds;\n        this.player.nativeElement.currentTime = seconds;\n    }\n    get startOffset(): number {\n        return this.startOffsetValue;\n    }\n\n    @Input()\n    public endOffset = 0;\n\n    currTimePosChanged(event) {\n        this.player.nativeElement.currentTime = event.value;\n    }\n\n    bindPlayerEvent(): void {\n\n        this.player.nativeElement.addEventListener('playing', () => {\n            this.isPlaying = true;\n            this.duration = Math.floor(this.player.nativeElement.duration);\n        });\n        this.player.nativeElement.addEventListener('pause', () => {\n            this.isPlaying = false;\n        });\n        this.player.nativeElement.addEventListener('timeupdate', () => {\n            this.currentTime = Math.floor(this.player.nativeElement.currentTime);\n            if (this.currentTime >= this.duration - this.endOffset) {\n                this.player.nativeElement.pause();\n            }\n        });\n        this.player.nativeElement.addEventListener('volume', () => {\n            this.volume = Math.floor(this.player.nativeElement.volume);\n        });\n        if (!this.iOS) {\n            this.player.nativeElement.addEventListener('loadstart', () => {\n                this.loaderDisplay = true;\n            });\n        }\n        this.player.nativeElement.addEventListener('loadeddata', () => {\n            this.loaderDisplay = false;\n            this.duration = Math.floor(this.player.nativeElement.duration);\n        });\n        this.player.nativeElement.addEventListener('ended', () => {\n            this.trackEnded.next('ended');\n        });\n\n    }\n\n    playBtnHandler(): void {\n        if (this.loaderDisplay) {\n            return;\n        }\n        if (this.player.nativeElement.paused) {\n            if (this.currentTime >= this.duration - this.endOffset) {\n                this.player.nativeElement.currentTime = this.startOffset;\n            } else {\n                this.player.nativeElement.currentTime = this.currentTime;\n            }\n\n            this.player.nativeElement.play();\n        } else {\n            this.currentTime = this.player.nativeElement.currentTime;\n            this.player.nativeElement.pause();\n        }\n    }\n\n    play(track?: Track): void {\n\n        if (track) {\n            this.startOffset = track.startOffset || 0;\n            this.endOffset = track.endOffset || 0;\n        }\n\n        setTimeout(() => {\n            this.player.nativeElement.play();\n        }, 50);\n\n    }\n\n    toggleVolume() {\n        if (this.volume === 0) {\n            this.setVolume(1.0);\n        } else {\n            this.setVolume(0);\n        }\n    }\n\n    private setVolume(vol) {\n        this.volume = vol;\n        this.player.nativeElement.volume = this.volume;\n    }\n\n}\n","import { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { Track } from '../../model/track.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AudioPlayerService {\n\n  // Dynamic update of playlist\n  tracks: Track[] = [];\n  playlistSubject$: BehaviorSubject<Track[]> =\n    new BehaviorSubject<Track[]>(this.tracks);\n\n  // Get the current track\n  currentTrack: Track;\n  currentTrackSubject$: BehaviorSubject<Track> =\n    new BehaviorSubject<Track>(this.currentTrack);\n\n  // Get the current time\n  currentTime: any;\n  currentTimeSubject$: BehaviorSubject<any> =\n    new BehaviorSubject<any>(this.currentTime);\n\n  setPlaylist(tracks: Track[]) {\n    this.tracks = tracks;\n    this.playlistSubject$.next(this.tracks);\n  }\n\n  getPlaylist(): Observable<Track[]> {\n    return this.playlistSubject$.asObservable();\n  }\n\n  setCurrentTrack(currentTrack: Track) {\n    this.currentTrack = currentTrack;\n    this.currentTrackSubject$.next(this.currentTrack);\n  }\n\n  getCurrentTrack(): Observable<Track> {\n    return this.currentTrackSubject$.asObservable();\n  }\n\n  setCurrentTime(currentTime: any) {\n    this.currentTime = currentTime;\n    this.currentTimeSubject$.next(this.currentTime);\n  }\n\n  getCurrentTime(): Observable<any> {\n    return this.currentTimeSubject$.asObservable();\n  }\n\n}\n","import { Component, OnInit, Input, ViewChild } from '@angular/core';\nimport { Track } from '../../model/track.model';\nimport { BaseAudioPlayerFunctions } from '../base/base-audio-player.component';\nimport { MatSlider } from '@angular/material/slider';\nimport { MatTableDataSource } from '@angular/material/table';\nimport { MatPaginator } from '@angular/material/paginator';\nimport { AudioPlayerService } from '../../service/audio-player-service/audio-player.service';\n\n@Component({\n    selector: 'mat-advanced-audio-player',\n    templateUrl: './mat-advanced-audio-player.component.html',\n    styleUrls: ['./mat-advanced-audio-player.component.css', './../base/base-audio-player.component.css']\n})\nexport class MatAdvancedAudioPlayerComponent extends BaseAudioPlayerFunctions implements OnInit {\n\n\n    audioPlayerService: AudioPlayerService;\n    constructor() {\n        super();\n        this.audioPlayerService = new AudioPlayerService();\n    }\n\n    @Input()\n    set playlist(playlist: Track[]) {\n        this.audioPlayerService.setPlaylist(playlist);\n    }\n\n    @ViewChild(MatPaginator, { static: false }) set matPaginator(mp: MatPaginator) {\n        this.paginator = mp;\n        this.setDataSourceAttributes();\n    }\n\n    displayedColumns: string[] = ['title', 'status'];\n    dataSource = new MatTableDataSource<Track>();\n    paginator: MatPaginator;\n\n    timeLineDuration: MatSlider;\n\n    tracks: Track[] = [];\n\n    @Input() displayTitle = true;\n    @Input() displayPlaylist = true;\n    @Input() displayVolumeControls = true;\n    @Input() pageSizeOptions = [10, 20, 30];\n    @Input() expanded = true;\n    @Input() autoPlay = false;\n\n    private currentIndex = 0;\n\n    currentTrack: Track;\n    private previousTrack: Track;\n    private nextTrack: Track;\n    private repeatIt: boolean = false;\n\n    ngOnInit() {\n\n        this.bindPlayerEvent();\n\n        // Subscribe to playlist observer from AudioPlayerService and\n        // update the playlist within MatAdvancedAudioPlayerComponent\n        this.audioPlayerService.getPlaylist().subscribe(tracks => {\n            if (tracks !== null && tracks !== []) {\n                this.tracks = tracks;\n                this.initialize();\n            }\n        });\n\n    }\n\n    initialize() {\n\n        // populate indexs for the track and configure\n        // material table data source and paginator\n        this.setDataSourceAttributes();\n\n        // auto play next track\n        this.player.nativeElement.addEventListener('ended', () => {\n            console.log('end reached', this.repeatIt)\n            if (this.repeatIt) {\n                this.repeatSong()\n            } else {\n                this.nextSong();\n            }\n        });\n\n        this.player.nativeElement.addEventListener('timeupdate', () => {\n            this.audioPlayerService.setCurrentTime(this.player.nativeElement.currentTime);\n        });\n\n        this.player.nativeElement.currentTime = this.startOffset;\n        this.updateCurrentSong();\n        if (this.autoPlay) {\n            super.play();\n        }\n    }\n\n    setDataSourceAttributes() {\n        let index = 1;\n        if (this.tracks) {\n            this.tracks.forEach((track: Track) => {\n                track.index = index++;\n            });\n            this.dataSource = new MatTableDataSource<Track>(this.tracks);\n            this.dataSource.paginator = this.paginator;\n        }\n    }\n\n    nextSong(): void {\n        if (this.displayPlaylist === true\n            && (((this.currentIndex + 1) % this.paginator.pageSize) === 0\n                || (this.currentIndex + 1) === this.paginator.length)) {\n            if (this.paginator.hasNextPage()) {\n                this.paginator.nextPage();\n            } else if (!this.paginator.hasNextPage()) {\n                this.paginator.firstPage();\n            }\n        }\n        this.currentTime = 0;\n        this.duration = 0.01;\n        this.repeatIt = false;\n\n        if ((this.currentIndex + 1) >= this.tracks.length) {\n            this.currentIndex = 0;\n        } else {\n            this.currentIndex++;\n        }\n        this.updateCurrentSong();\n        this.play(this.nextTrack);\n    }\n\n    previousSong(): void {\n        this.currentTime = 0;\n        this.duration = 0.01;\n        this.repeatIt = false;\n\n        if (!this.checkIfSongHasStartedSinceAtleastTwoSeconds()) {\n            if (this.displayPlaylist === true\n                && (((this.currentIndex) % this.paginator.pageSize) === 0\n                    || (this.currentIndex === 0))) {\n                if (this.paginator.hasPreviousPage()) {\n                    this.paginator.previousPage();\n                } else if (!this.paginator.hasPreviousPage()) {\n                    this.paginator.lastPage();\n                }\n            }\n            if ((this.currentIndex - 1) < 0) {\n                this.currentIndex = (this.tracks.length - 1);\n            } else {\n                this.currentIndex--;\n            }\n        } else {\n            this.resetSong();\n        }\n        this.updateCurrentSong();\n        this.play(this.previousTrack);\n    }\n\n    resetSong(): void {\n        this.player.nativeElement.src = this.currentTrack.link;\n    }\n\n    selectTrack(index: number): void {\n        this.currentIndex = index - 1;\n        this.updateCurrentSong();\n        this.play(this.currentTrack);\n    }\n\n    checkIfSongHasStartedSinceAtleastTwoSeconds(): boolean {\n        return this.player.nativeElement.currentTime > 2;\n    }\n\n    updateCurrentSong(): void {\n        this.currentTrack = this.tracks[this.currentIndex];\n        this.previousTrack = ((this.currentIndex - 1) >= 0) ? this.tracks[this.currentIndex - 1] : this.tracks[this.tracks.length - 1];\n        this.nextTrack = ((this.currentIndex + 1) >= this.tracks.length) ? this.tracks[0] : this.tracks[this.currentIndex + 1];\n\n        this.audioPlayerService.setCurrentTrack(this.currentTrack);\n    }\n\n    repeatSong(): void {\n        console.log('u just call repeat the song function')\n        this.repeatIt = true\n        this.currentTime = 0;\n        this.duration = 0.01;\n        this.resetSong()\n\n        this.updateCurrentSong();\n\n        this.play(this.currentTrack);\n    }\n\n    setRepatFlag() {\n        this.repeatIt = !this.repeatIt\n    }\n\n}\n","import { Component, OnInit, Input } from '@angular/core';\nimport { BaseAudioPlayerFunctions } from '../base/base-audio-player.component';\nimport { AudioPlayerService } from '../../service/audio-player-service/audio-player.service';\n\n@Component({\n    selector: 'mat-basic-audio-player',\n    templateUrl: './mat-basic-audio-player.component.html',\n    styleUrls: ['./mat-basic-audio-player.component.css', './../base/base-audio-player.component.css']\n})\nexport class MatBasicAudioPlayerComponent extends BaseAudioPlayerFunctions implements OnInit {\n\n    @Input()\n    title: string;\n\n    @Input()\n    audioUrl: string;\n\n    @Input()\n    displayTitle = false;\n\n    @Input()\n    autoPlay = false;\n\n    @Input()\n    displayVolumeControls = true;\n\n    audioPlayerService: AudioPlayerService;\n\n    constructor() {\n        super();\n        this.audioPlayerService = new AudioPlayerService();\n    }\n\n    ngOnInit() {\n        this.bindPlayerEvent();\n\n        this.player.nativeElement.addEventListener('timeupdate', () => {\n            this.audioPlayerService.setCurrentTime(this.player.nativeElement.currentTime);\n        });\n\n        if (this.autoPlay) {\n            super.play();\n        }\n    }\n\n    resetSong(): void {\n        this.player.nativeElement.src = this.audioUrl;\n    }\n\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n/*\n * Transform seconds to minutes:seconds\n * Example : 270 -> 02:30\n*/\n@Pipe({ name: 'secondsToMinutes' })\nexport class SecondsToMinutesPipe implements PipeTransform {\n    transform(time: number): string {\n        const minutes = ('0' + Math.floor(time / 60)).slice(-2);\n        const seconds = ('0' + time % 60).slice(-2);\n        return `${minutes}:${seconds}`;\n    }\n}\n","import { NgModule } from '@angular/core';\n\nimport { MatSliderModule } from '@angular/material/slider';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatButtonModule } from '@angular/material/button';\n\nimport { MatBasicAudioPlayerComponent } from './component/mat-basic-audio-player/mat-basic-audio-player.component';\nimport { CommonModule } from '@angular/common';\nimport { SecondsToMinutesPipe } from './pipe/seconds-to-minutes';\nimport { MatAdvancedAudioPlayerComponent } from './component/mat-advanced-audio-player/mat-advanced-audio-player.component';\n\nimport { FormsModule } from '@angular/forms';\nimport { MatIconModule } from '@angular/material/icon';\n\n@NgModule({\n  declarations: [MatBasicAudioPlayerComponent, SecondsToMinutesPipe, MatAdvancedAudioPlayerComponent],\n  imports: [CommonModule, FormsModule, MatButtonModule, MatCardModule, MatTableModule, MatFormFieldModule,\n    MatSliderModule, MatExpansionModule, MatPaginatorModule, MatIconModule],\n  exports: [MatBasicAudioPlayerComponent, MatAdvancedAudioPlayerComponent]\n})\nexport class NgxAudioPlayerModule {\n}\n","export class Track {\n  index?: number;\n  link: string;\n  title: string;\n  startOffset?: number;\n  endOffset?: number;\n  public toString = (): string => {\n    return `Track (index: ${this.index}, title: ${this.title})`;\n  }\n}\n","/*\n * Public API Surface of ngx-audio-player\n */\n\nexport * from './lib/component/mat-advanced-audio-player/mat-advanced-audio-player.component';\nexport * from './lib/component/mat-basic-audio-player/mat-basic-audio-player.component';\nexport * from './lib/ngx-audio-player.module';\nexport * from './lib/model/track.model';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n\nexport {BaseAudioPlayerFunctions as ɵa} from './lib/component/base/base-audio-player.component';\nexport {SecondsToMinutesPipe as ɵb} from './lib/pipe/seconds-to-minutes';"],"names":[],"mappings":"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"}